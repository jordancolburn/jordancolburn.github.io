---
layout: post
title: Introduction to Pure Data
date: 2010-09-23 16:16:16
categories: 
permalink: /:year/:month/:day/:title/
---
<p><em>This is a basic introduction to PD that was written for my technical writing class.&nbsp; I reposted it here as a good overview of PD for those who have never used it.</em></p>
<p><strong><span style="text-decoration: underline;">Overview</span> </strong></p>
<p>When it comes to choosing a programming language, there are many choices. &nbsp;For low level designs concerned with speed, assembly language or C could be the way to go. &nbsp;For portable higher level designs involving graphics or games, an object oriented approach using Java might be more appropriate (1). &nbsp;For a more specialized task, a more specialized language can be used. &nbsp;Pure Data(PD) is a programming language tailored to real-time multimedia creation and processing. &nbsp;PD specializes in audio processing, but also has libraries available for graphics and video.</p>
<!--more-->
<p><span style="text-decoration: underline;"><strong> History</strong> </span></p>
<p>Pure Data is an open source program that is developed and maintained by Miller Puckette. &nbsp;PD was originally developed when puckett was working in France. &nbsp;It is closely related to other specialized processing languages such as MAX/MSP(2). &nbsp;Because PD is open source unlike it&rsquo;s commercial cousin MAX, it can be downloaded, used, modified and redistributed freely.</p>
<p><span style="text-decoration: underline;"><strong>Uses</strong></span></p>
<p>Pure Data has many uses. &nbsp;Its ability to combine many inputs, both digital and analog, and use them to control and manipulate one another is it&rsquo;s greatest strength. &nbsp;Pure Data can be used to create playable synthesizers, audio mixers, video mixers, sophisticated drum machines, samplers and more. A recent example of creative PD use would be the the RJDJ app available on the iPhone. &nbsp;RJDJ uses PD patches to create generative soundscapes that react to microphone, touchscreen, GPS and accelerometer input.</p>
<p><span style="text-decoration: underline;"><strong>PD basics</strong> </span></p>
<p>While most programming languages use text as their primary programming method, PD uses a graphical patching environment. &nbsp;Each &ldquo;patch&rdquo; (program) is made up of a collection of objects. &nbsp;The different objects are physically represented on the screen by a rectangle with inlets(on the top) and outlets(on the bottom). &nbsp;Objects which create and process audio are denoted by using a &ldquo;~&rdquo; at the end of the object name. &nbsp;You can create a series of objects and connect their inputs and outputs just like you would using physical hardware. &nbsp;This makes PD very easy to understand for a musician with little programming experience who is interested in creating digital music.</p>
<p><img src="https://lh4.googleusercontent.com/d-nJxjAsLs5BAuhRwe_gRKz6Girbc-e-mrvdwR99mF2mpf6ro4Icw_S4aazYg4HCHJaMCDg5pduzOWOWAXjtwCGMAI5OZuTuYS31J4YKofT_VE8BsQ" alt="" width="344px;" height="302px;" /></p>
<p><em>A screenshot showing part of a Pure Data patch. </em></p>
<p>&nbsp;</p>
<p>Each object is either an external(which can be programmed in C) or an abstraction(which is created by combining a group of other objects into a function based group). &nbsp;This allows the user to combine simple objects into higher level objects like playable synthesizers with parameters. &nbsp;After creating many higher level objects, it lets the user do things like composition and control on a higher level, while being able to get in and control each synth parameter and oscillator in detail.</p>
<p><span style="text-decoration: underline;"><strong> PD Patching</strong> </span></p>
<p>Objects in PD are connected by virtual patch cables. &nbsp;The thin cables transmit data, while the bolded cables transmit audio information. &nbsp;Many objects, such as the audio multiplication object(&ldquo;*~&rdquo;) accept a mix of both audio and data signals(3). &nbsp;The main design paradigm in PD is to manipulate outputs into the appropriate form for inputs. &nbsp;For example, a MIDI slider or knob on a keyboard outputs an integer between 0-127. &nbsp;To connect this to a synthesizer volume control that wants to see an input of 0-1, simply divide the output of the midi slider input by the number 127 before connecting to the input of &nbsp;synth.</p>
<p>Connecting lines between all objects can result in a very messy and hard to understand program. &nbsp;To solve this program, PD utilizes send(&ldquo;s&rdquo;) and receive(&ldquo;r&rdquo;) objects to send signals without actually connecting the lines between them. &nbsp;Send and receive work only for data signals. &nbsp;To send audio signals without connecting patch cables the &ldquo;throw~&rdquo; and &ldquo;catch~&rdquo; objects are used. Graphical User Interfaces After you&rsquo;ve created an application, you want an easy way to control it. &nbsp;PD comes with many built in graphical user interface(GUI) options. &nbsp;There are horizontal and vertical sliders, buttons, checkboxes, X-Y pads and more. &nbsp;Connecting these through different math functions to the inputs of objects can allow sophisticated control over all parameters.</p>
<p>&nbsp;</p>
<p><img src="https://lh4.googleusercontent.com/ed_zwH59sSg6U22FYb6giFrdXqtpBQCihg319xXbZE2Hvgcu1noC_ME-tvOOqbs2kWXnwcNEQndbdkMIsg_a46QSUx8tCmeSMVXi4dwUm5rlE8p7vw" alt="" width="625px;" height="335px;" /></p>
<p><em>A finished program using built-in PD GUI objects. </em></p>
<p>&nbsp;</p>
<p>For more advanced GUIs, there are extensions such as GrIPD. &nbsp;GrIPD allows you to create interfaces with custom graphics, images and control for a more custom look for your PD patches. PD Visuals There are a few libraries that allow PD to do visual processing. &nbsp;The Graphics Environment for Multimedia(GEM) library allows PD patches to create openGL graphics. &nbsp;There are many objects for creating and manipulating simple 3D shapes such as planes and spheres. &nbsp;GEM can also use a webcam input to project onto the surface of the shapes in 3D. &nbsp;By combining GEM with an existing audio patch and using the controls and input to manipulate one another, the programmer can create a very complex and interactive experience using simple pieces.</p>
<p><img src="https://lh4.googleusercontent.com/ZEVvrH864Maim2bPaWqLSOlwzUA4733phH-qCPTbnd-e6duxc4071GKBXk6OpaKzfkMnhHMjb8HaWpbCx_rgC_Ic6a5DCsej2rNhOOxLei58o9NtBw" alt="" width="425px;" height="319px;" /></p>
<p><em>A PD A/V art installation using GEM to manipulate a webcam image in response to generated music. </em></p>
<p>&nbsp;</p>
<p><span style="text-decoration: underline;"><strong>Learning More</strong></span></p>
<p>The best way to learn to use PD is to analyze the tutorial patches. &nbsp;There are many tutorial patches covering a wide variety of PD features. &nbsp;To learn more about a specific object, all you need to do is right click the object and select &ldquo;Help&rdquo;. &nbsp;This opens up a help patch for each specific object. &nbsp;In each help patch is a text description and often the patches often include many example setups that you can reuse as a starting point in your own patch. Now that you&rsquo;ve seen Pure Data&rsquo;s features, and gotten a feel for it&rsquo;s basic concepts, you can evaluate it as a platform and tool for your next programming project. &nbsp;</p>
<p>The latest updates to PD-extended(which includes many extra libraries) can be downloaded from http://puredata.info/downloads.</p>
<p>&nbsp;</p>
<p><span style="text-decoration: underline;"><strong>Works Cited </strong></span></p>
<p>(1)Programming Languages. <a href="http://alternatives.rzero.com/lang.html">http://alternatives.rzero.com/lang.html</a> (accessed Sept.15, 2010).</p>
<p>(2) Pure Data-PD Community Site Home Page. <a href="http://puredata.info/">http://puredata.info/</a> (accessed Sept. 15, 2010). (3) Puckette, M. The Theory and Technique of Electronic Music. ;World Scientific Publishing Co: New Jersey, 2007.</p>